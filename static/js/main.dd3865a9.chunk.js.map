{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","util/GetAutocompleteSuggestions.js","components/SearchBar/Autocomplete.js","components/SearchBar/SearchBar.js","util/Yelp.js","util/ApiKeys.js","util/Spinner.js","util/Error.js","components/LoginMenu/LoginMenu.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faMapMarkerAlt","faPhone","Business","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","business","props","react_default","a","createElement","className","src","imageSrc","alt","name","href","address","city","target","rel","react_fontawesome_index_es","icon","state","zipCode","phone","category","priceRange","rating","reviewCount","url","React","Component","BusinessList","businesses","map","Business_Business_Business","id","defaultAutocomplete","getSuggestions","_ref","asyncToGenerator","regenerator_default","mark","_callee","location","wrap","_context","prev","next","abrupt","stop","_x","Autocomplete","_this","call","suggestionsEnabled","suggestions","filteredSuggestions","handleClick","bind","assertThisInitialized","_this2","then","setState","includes","userInput","filter","suggestion","toLowerCase","startsWith","event","setTermValue","currentTarget","innerHTML","_this3","element","onClick","sortByOptions","Best Match","Highest Rated","Most Reviewed","SearchBar","term","sortBy","termError","locationError","termAutocompletionEnabled","handleTermChange","handleLocationChange","handleSearch","focusOnLocationField","sortByOption","length","preventDefault","searchYelp","type","keyCode","clearErrorMessageAndSearchResults","loading","refs","locationField","focus","keys","sortByOptionValue","getSortByClass","handleSortByChange","renderSortByOptions","method","onKeyDown","autoComplete","undefined","onChange","placeholder","ref","autoFocus","components_SearchBar_Autocomplete","onFocus","Yelp","fetch","concat","headers","Authorization","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","price","Error","catch","Spinner","react_spinners","css","sizeUnit","size","color","margin","errorMessage","style","height","LoginMenu","showMenu","toggleButton","onMouseEnter","onMouseLeave","lib","App","LoginMenu_LoginMenu_LoginMenu","SearchBar_SearchBar_SearchBar","Spinner_Spinner","BusinessList_BusinessList_BusinessList","Error_Error","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dd3865a9.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faPhone } from '@fortawesome/free-solid-svg-icons';\n// import { faFacebook } from '@fortawesome/free-solid-svg-icons';\n// import { faPinterestF } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faMapMarkerAlt, faPhone);\n\n//React component class, which will be used to render information about each business\nexport class Business extends React.Component {\n    render() {\n        const business = this.props.business;\n        \n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img \n                        src={business.imageSrc} \n                        altn                    />    \n\n                    <h2>{business.name}</h2>  \n                    <div className=\"Business-information\">\n                        <div className=\"Business-address\">\n                            <p>                                \n                                <a href={\"https://www.google.com/maps/place/\" + business.address + \" \" + business.city} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {business.address}  <FontAwesomeIcon icon=\"map-marker-alt\" />   \n                                </a>\n\n                            </p>\n                            <p>{business.city}</p>\n                            <p>{business.state} {business.zipCode}</p>\n                            <p>\n                                {business.phone} \n                                <FontAwesomeIcon icon=\"phone\" />\n                            </p>\n                        </div>\n\n                        <div className=\"Business-reviews\">\n                            <h3>{business.category}</h3>\n                            <h3>{business.priceRange}</h3>\n                            <h3 className=\"rating\">{business.rating} star{business.rating > 0 && business.rating <= 1 ? \"\" : \"s\"}</h3>\n                            <p>{business.reviewCount} review{business.reviewCount === 1 ? \"\" : \"s\"}</p>\n                        </div>\n                    </div>   \n                    <a href={business.url} target=\"_blank\" rel=\"noopener noreferrer\">Open restaurant's page</a>\n                    <div></div>\n                </div>           \n            </div>\n        );\n    }\n}","import React from 'react';\nimport './BusinessList.css';\nimport { Business } from '../Business/Business';\n\n//React component used to nicely render information about restaurants received from YELP API\nexport class BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => {\n                    return <Business key={business.id} business={business} />\n                })}\n            </div>\n        );\n    }\n}","// import { apiKey } from './ApiKeys';\n// import { geoMapKey } from './ApiKeys';\n\nconst defaultAutocomplete = ['mcdonald\"s', 'kfc', 'sushi', 'subway', \n                            'pizza', 'steakhouse', 'korean', 'german', \n                            'french', 'ethiopian', 'arab', 'uzbek', \n                            'greek', 'italian', 'thai', 'vietnamese', \n                            'indian', 'chinese', 'russian', 'mexican', \n                            'american', 'cuban', 'ukranian', 'canadian',\n                            'japanese', 'steak', 'downtown',\n                            'mediterranean', 'fast food', 'bbq', 'brazilian',\n                            'vegetarian', 'punjabi'];\n\nconst getSuggestions = async (location) => {\n    // !!! Fix later ///\n    // try {\n    //     // const coordinates = await getLatitudeAndLongitude(location);\n\n    //     const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/autocomplete?latitude=${coordinates.lat}&longitude=${coordinates.lng}&text=\"restaurants\"`,\n    //     {headers: {\n    //         'Authorization' : `Bearer ${apiKey}`\n    //     }});\n\n    //     if (response.ok) {\n    //         const jsonResponse = await response.json();\n\n\n    //         return defaultAutocomplete.concat(\n    //             jsonResponse.categories.map(catObject => catObject.alias),\n    //             jsonResponse.terms.map(termsObj => termsObj.text));\n    //     }  \n    // }\n    // catch(error) { // If there's a network error (i.e. no internet connection, or api is unavailable return default autocomplete list)\n    //     console.log(error);\n\n    //     return defaultAutocomplete;\n    // }\n\n    return defaultAutocomplete;\n}\n\n// const getLatitudeAndLongitude = async (location) => {\n//     try {\n//         const response = await fetch(`http://www.mapquestapi.com/geocoding/v1/address?key=${geoMapKey}&location=17 Ave SW Calgary\"`);\n\n//         if (response.ok) {\n//             const jsonResponse = await response.json();\n\n//             return jsonResponse.results[0].locations[0].latLng;\n//         }\n//     }\n//     catch(error) { \n//         console.log(error);\n//     }\n// };\n\nexport default getSuggestions;","import React from 'react';\nimport getSuggestions from '../../util/GetAutocompleteSuggestions';\nimport './Autocomplete.css';\n\nclass Autocomplete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            suggestionsEnabled: this.props.suggestionsEnabled,\n            suggestions: [],\n            filteredSuggestions: []\n        }\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n    \n    // Create suggestion list from response from Yelp API, before autocomplete component is rendered\n    componentWillMount() {\n        \n        getSuggestions(this.props).then((suggestions) => {\n            this.setState({\n                suggestions: suggestions\n            });\n\n        });\n    }\n\n    // Filter suggestions if user input changed and prop is sent to the Autocomplete component\n    componentWillReceiveProps(props) {\n        let filteredSuggestions;\n\n        // If autocompletion disabled or user already typed the whole word from autosuggestion list or the user input is blank\n        if(props.suggestionsEnabled === false || this.state.filteredSuggestions.includes(props.userInput) || props.userInput === \"\") {\n            this.setState({\n                suggestionsEnabled: false\n            });\n            return null;\n        }\n\n        // If all abovementioned conditions aren't met, and everything is good create array with suggestions based on user input\n        filteredSuggestions = this.state.suggestions.filter((suggestion) => {\n            return suggestion.toLowerCase().startsWith(props.userInput.toLowerCase());\n        });\n        \n        this.setState({\n            filteredSuggestions: filteredSuggestions,\n            suggestionsEnabled: true\n        });\n    }\n\n    // Handle click\n    handleClick(event) {\n        this.props.setTermValue(event.currentTarget.innerHTML);\n        \n        //Close all suggestions if user selected one\n        this.setState({\n            suggestionsEnabled: false\n        });\n    }\n\n    render() {\n        let output;\n\n        // Check if there is any suggestions available\n        if (this.state.suggestionsEnabled) {\n            output = (\n                <ul className=\"suggestions\">\n                    {this.state.filteredSuggestions.map(element => {\n                        return <li className=\"suggestionItem\"\n                                    key={element}\n                                    onClick={this.handleClick}\n                                    value={element}>\n                                        {element}\n                                </li>\n                    })}\n                </ul>\n            );\n        }\n        else { //If there's no any suggestions, we will return nothing, i.e. null\n            output = null;\n        }\n\n        return output;\n    }\n}\n\nexport default Autocomplete;","import React from 'react';\nimport Autocomplete from './Autocomplete';\nimport './SearchBar.css';\n\n// One of the object keys will be used to pass corresponding value to Yelp API to return results in accordance with user's choice\nconst sortByOptions = {\n    'Best Match' : \"best_match\",\n    'Highest Rated' : \"rating\",\n    'Most Reviewed' : \"review_count\"\n};\n\n// React component Seach bar class\nexport class SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Searchbar state object\n        this.state = {\n            term : '',\n            location: '',\n            sortBy: 'best_match',\n            termError: false,\n            locationError: false,\n            termAutocompletionEnabled: false\n        };   \n        \n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.setTermValue = this.setTermValue.bind(this);\n        this.focusOnLocationField = this.focusOnLocationField.bind(this);\n    }\n\n    // Function checking if the current search option is selected and returnig css class name active if it's the case\n    getSortByClass (sortByOption) {\n        if (sortByOption === this.state.sortBy) {\n            return 'active';\n        }\n        else {\n            return '';\n        }\n    }\n\n//============================================================================    \n// Event handlers\n\n    handleTermChange(event) {\n\n        this.setState({\n            term: event.target.value,\n            termError: event.target.value.length > 0 && false,\n            termAutocompletionEnabled: true\n        });\n        event.preventDefault(); \n    }\n\n    handleLocationChange(event) {\n        \n        this.setState({\n            location: event.target.value,\n            locationError: event.target.value.length > 0 && false\n        });\n    }\n\n    handleSortByChange(sortByOption) {\n\n        this.setState({\n            sortBy: sortByOption\n        });\n\n        if (this.state.term !== \"\" && this.state.location !== \"\") {\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        }\n    }\n\n    handleSearch(event) {\n\n        if (event.type === \"click\" || event.keyCode === 13) {\n\n            // Call clearErrorMessageAndSearchResults function located in App.js to clear possible error message and previous search results\n            this.props.clearErrorMessageAndSearchResults();\n\n            // Check if user entered search request and location\n            if (this.state.location === \"\" && this.state.term === \"\") {\n                this.setState({\n                    termError: true,\n                    locationError: true\n                });\n              }\n            else if (this.state.term === \"\") {\n                this.setState({\n                    termError: true,\n                    locationError: false\n                });\n            }\n            else if (this.state.location === \"\") {\n                this.setState({\n                    termError: false,\n                    locationError: true\n                });\n            }\n        \n            else {// if user has entered search request and location send GET request to the YELP API\n                // if both field aren't empty clear error flags\n                this.setState({\n                    termError: false,\n                    locationError: false,\n                    loading: true\n                });\n\n                this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n            }\n\n            event.preventDefault(); \n        }\n    }    \n\n    setTermValue(value) {\n        this.setState({\n            term: value\n        });\n        \n        //Set focus on location field when user chose one of the options from autocomplete list\n        this.refs.locationField.focus();\n    }\n\n    // Method will disable restaurants autocompletion if location input field gained focus\n\n    focusOnLocationField(event) {\n        this.setState({\n            termAutocompletionEnabled: false\n        });\n\n        event.preventDefault(); \n    }\n\n// Event handlers end \n// =======================================================================\n\n    // Will return li elements containing search options for users\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map( sortByOption => {\n            let sortByOptionValue = sortByOptions[sortByOption];\n\n            return <li className={this.getSortByClass(sortByOptionValue)} \n                        key={sortByOptionValue}\n                        onClick={this.handleSortByChange.bind(this, sortByOptionValue)} >\n                            {sortByOption}\n                    </li>\n        });\n    }\n\n    // Render all content\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n\n                <div className=\"SearchBar-fields\">\n                    <form method=\"#\" onKeyDown={this.handleSearch} autoComplete=\"on\" >\n                        <div>\n                            <div className=\"inputFieldErrorMessage\">{this.state.termError ? \"The field cannot be empty\" : undefined}</div>\n                            <input onChange={this.handleTermChange}\n                                    placeholder=\"Search Restaurants\"\n                                    value={this.state.term}\n                                    className={this.state.termError ? \"inputFieldError\" : undefined}\n                                    ref='restaurantField' \n                                    id='restaurantField'\n                                    autoComplete='off'\n                                    autoFocus\n                            />\n                            <Autocomplete \n                                    userInput={this.state.term}\n                                    setTermValue={this.setTermValue}\n                                    suggestionsEnabled={this.state.termAutocompletionEnabled}\n                                    location={this.state.location}\n                            />\n                        </div>\n\n                        <div>\n                            <div className=\"inputFieldErrorMessage\">{this.state.locationError ? \"The field cannot be empty\" : undefined}</div>               \n                            <input onChange={this.handleLocationChange}\n                                    onFocus={this.focusOnLocationField}\n                                    placeholder=\"Where?\" \n                                    className={this.state.locationError ? \"inputFieldError\" : undefined} \n                                    ref='locationField'\n                                    id='locationField'\n                                    autoComplete='off'\n                            />    \n                        </div>                            \n                    </form>\n                </div> \n\n                <div className=\"SearchBar-submit\">\n                    <button onClick={this.handleSearch}>Let's Go</button>\n                </div>\n            </div>\n        );\n    }\n}","import { apiKey } from './ApiKeys';\n\nexport const Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n                    {headers: {\n                        'Authorization' : `Bearer ${apiKey}`\n                    }}\n        ).then((response) => { \n            return response.json();\n        }).then((jsonResponse) => {\n                return jsonResponse.businesses.map((business) => {\n                    if (jsonResponse.businesses) {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zip_code,\n                            category: business.categories[0].title,\n                            rating: business.rating,\n                            reviewCount: business.review_count,\n                            url: business.url,\n                            phone: business.phone,\n                            priceRange: business.price\n                        };\n                    }\n                    else {\n                        throw Error(\"Nothing was returned\");\n                    }\n\n                });\n            }).catch(() => {\n                return [];\n            });\n    }\n}","export const apiKey = 'AtXwTkXAS_KRjWQfaQqZby_CgxqfySQsmzZwqXZjglLvYi29i69_ToIcvXeGPYMG75gqVTQz9o-U-kxr8FKrt-vIdsCNpweeNnf3NVuYlInAm2MrHqeb5DhmamhGXHYx';\nexport const geoMapKey = 'UNalj6nYBvGMrJAObc2BxfFl7jmCVgc7';","import React from 'react';\nimport { FadeLoader } from 'react-spinners';\nimport './Spinner.css';\n\n// CSS for Spinner component\nconst override = `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 10rem auto;\n    width: 100%;\n    height: 100%;\n`;\n\nexport class Spinner extends React.Component {\n\n    render() {\n        return (\n            <div className=\"spinner\">\n                <FadeLoader \n                    css={override}\n                    sizeUnit={\"rem\"}\n                    size={6}\n                    color={'black'}\n                    loading={this.props.loading}\n                    margin={'10%'}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Error.css';\n\nexport const Error = (props) => {\n    return (<h3 className=\"error\">{props.errorMessage}</h3>);\n}","import React from 'react';\nimport './LoginMenu.css';\nimport { FacebookLoginButton, GoogleLoginButton, TwitterLoginButton } from 'react-social-login-buttons';\n\n// Buttons style properties\nconst style = {\n    height: '2.3rem',\n    margin: '.1rem .3rem'\n}\n\nexport class LoginMenu extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showMenu: false\n        }\n        this.toggleButton = this.toggleButton.bind(this);             \n    }\n\n    toggleButton() {\n        this.setState({\n            showMenu: !this.state.showMenu\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Login\"\n                onMouseEnter={this.toggleButton}  \n                onMouseLeave={this.toggleButton}>\n\n                <button className={this.state.showMenu ? 'Button-Active' : ''}>\n                    Log In With\n                </button>\n                \n                <div className={!this.state.showMenu ? 'Login-Menu hidden' : 'Login-Menu'}>\n                    <FacebookLoginButton style={style}>\n                        <span>Facebook</span> \n                    </FacebookLoginButton>\n                    <GoogleLoginButton style={style}>\n                        <span>Google</span> \n                    </GoogleLoginButton>\n                    <TwitterLoginButton style={style}>\n                        <span>Twitter</span> \n                    </TwitterLoginButton>\n                </div>    \n            </div>\n        )\n    }\n} ","import React from 'react';\nimport './App.css';\nimport { BusinessList } from './components/BusinessList/BusinessList.js';\nimport { SearchBar } from './components/SearchBar/SearchBar.js';\nimport { Yelp } from './util/Yelp';\nimport { Spinner } from './util/Spinner';\nimport { Error } from './util/Error';\nimport { LoginMenu } from './components/LoginMenu/LoginMenu';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      businesses: [],\n      loading: false,\n      errorMessage: \"\"\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n    this.clearErrorMessageAndSearchResults = this.clearErrorMessageAndSearchResults.bind(this);\n  } \n\n  searchYelp(term, location, sortBy) {\n      // Set loading state to true, so spinner will be active until request to Yelp API is fulfilled\n      this.setState({\n        businesses: [],\n        loading: true\n      });\n\n      // Send request to Yelp API\n      Yelp.search(term, location, sortBy).then((businesses) => {\n        if (businesses.length > 0) {\n          this.setState({\n            loading: false,\n            businesses: businesses,\n            errorMessage: \"\"\n          });\n        }\n        else {\n          this.setState({\n            loading: false,\n            businesses: [],\n            errorMessage: \"Your search hasn't returned any results. Please check your input or Internet connection\"\n          })\n        }\n      }); \n  }\n\n  // Function will be called from searchBar component to remove \"Your search hasn't returned any results\" error message\n  clearErrorMessageAndSearchResults() {\n    this.setState({\n      businesses: [],\n      errorMessage: \"\"\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"NavMenu\">\n          <div className=\"Logo\">\n            <h1>Ravenous</h1>\n          </div>\n          <div className=\"LoginMenu\">\n            <LoginMenu />\n          </div>\n        </nav>        \n        <SearchBar searchYelp = {this.searchYelp} clearErrorMessageAndSearchResults = {this.clearErrorMessageAndSearchResults} />\n        <Spinner loading={this.state.loading} />\n        <BusinessList businesses = {this.state.businesses} />\n        <Error errorMessage = {this.state.errorMessage} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}