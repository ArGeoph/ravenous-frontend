{"version":3,"sources":["utils/Constants.js","components/Business/Business.js","components/BusinessList/BusinessList.js","utils/GetAutocompleteSuggestions.js","components/Autocomplete/Autocomplete.js","components/SearchBar/SearchBar.js","utils/Yelp.js","utils/ApiKeys.js","components/Spinner/Spinner.js","components/ErrorMessage/ErrorMessage.js","components/LoginMenu/LoginMenu.js","App.js","serviceWorker.js","index.js"],"names":["SORT_OPTIONS","library","add","faMapMarkerAlt","faPhone","Business","props","business","address","category","city","imageSrc","name","phone","priceRange","rating","reviewCount","state","url","zipCode","className","src","alt","loading","href","target","rel","icon","BusinessList","React","memo","businesses","map","key","id","defaultAutocomplete","getSuggestions","location","a","Autocomplete","handleClick","event","setTermValue","currentTarget","innerHTML","setState","suggestionsEnabled","handleKeyPress","console","log","keyCode","activeItem","filteredSuggestions","suggestions","this","then","includes","userInput","filter","suggestion","toLowerCase","startsWith","onKeyDown","autocompleteItem","onClick","value","Component","SearchBar","handleTermChange","term","termError","length","termAutocompletionEnabled","preventDefault","handleLocationChange","locationError","handleSearch","type","clearErrorMessageAndSearchResults","searchYelp","sortBy","refs","locationField","focus","focusOnLocationField","sortByOption","Object","keys","sortByOptionValue","handleSortByChange","bind","renderSortByOptions","method","autoComplete","onChange","placeholder","ref","autoFocus","onFocus","Yelp","search","fetch","headers","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","price","Error","catch","Spinner","css","sizeUnit","size","color","ErrorMessage","errorMessage","style","height","margin","LoginMenu","useState","isLoginMenuVisible","setLoginMenuVisibility","onMouseEnter","onMouseLeave","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e619ebaf.chunk.js","sourcesContent":["// API URLs\nexport const GOOGLE_MAPS_URL = 'https://www.google.com/maps/place/';\n\n// One of the object keys will be used to pass corresponding value to Yelp API to return results in accordance with user's choice\nexport const SORT_OPTIONS = {\n    'Best Match' : 'best_match',\n    'Highest Rated' : 'rating',\n    'Most Reviewed' : 'review_count'\n};\n","import React from 'react';\nimport './Business.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faPhone } from '@fortawesome/free-solid-svg-icons';\nimport { GOOGLE_MAPS_URL } from '../../utils/Constants';\nlibrary.add(faMapMarkerAlt, faPhone);\n\n/**\n *  Renders individual business card\n */\nexport const Business = (props) => {\n    const {\n        address,\n        category,\n        city,\n        imageSrc,\n        name,\n        phone,\n        priceRange,\n        rating,\n        reviewCount,\n        state,\n        url,\n        zipCode\n    } = props.business;\n\n    return (\n        <div className='Business'>\n            <div className='image-container'>\n                <img\n                    src={ imageSrc }\n                    alt={ name }\n                    loading='lazy'\n                />\n\n                <h2>{ name }</h2>\n                <div className='Business-information'>\n                    <div className='Business-address'>\n                        <p>\n                            <a\n                                href={ `${ GOOGLE_MAPS_URL }${ address } ${ city }` }\n                                target='_blank'\n                                rel='noopener noreferrer'\n                            >\n                                { address } <FontAwesomeIcon icon='map-marker-alt' />\n                            </a>\n                        </p>\n                        <p>{ city }</p>\n                        <p>{ state } { zipCode }</p>\n                        <p>\n                            { phone }<FontAwesomeIcon icon='phone' />\n                        </p>\n                    </div>\n\n                    <div className='Business-reviews'>\n                        <h3>{ category }</h3>\n                        <h3>{ priceRange }</h3>\n                        <h3 className='rating'>\n                            { rating } star{ rating > 0 && rating <= 1 ? '' : 's' }\n                        </h3>\n                        <p>{ reviewCount } review{ reviewCount === 1 ? '' : 's' }</p>\n                    </div>\n                </div>\n                <a href={ url } target='_blank' rel='noopener noreferrer'>Open restaurants's page</a>\n            </div>\n        </div>\n    );\n}// End of Business component\n// End of file\n","import React from 'react';\nimport { Business } from '../Business/Business';\nimport './BusinessList.css';\n\n/**\n * Renders list of business tiles filled with information received from Yelp API\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const BusinessList = React.memo(({ businesses }) => {\n    return (\n        <div className='BusinessList'>\n            { businesses.map(business => <Business key={ business.id } business={ business } />) }\n        </div>\n    );\n});// End of BusinessList Component\n// End of file\n","const defaultAutocomplete = [ 'mcdonald\\'s', 'kfc', 'sushi', 'subway',\n                            'pizza', 'steakhouse', 'korean', 'german', \n                            'french', 'ethiopian', 'arab', 'uzbek', \n                            'greek', 'italian', 'thai', 'vietnamese', \n                            'indian', 'chinese', 'russian', 'mexican', \n                            'american', 'cuban', 'ukrainian', 'canadian',\n                            'japanese', 'steak', 'downtown',\n                            'mediterranean', 'fast food', 'bbq', 'brazilian',\n                            'vegetarian', 'punjabi' ];\n\nconst getSuggestions = async (location) => {\n    return defaultAutocomplete;\n}\n\nexport default getSuggestions;\n","import React, { Component } from 'react';\nimport getSuggestions from '../../utils/GetAutocompleteSuggestions';\nimport './Autocomplete.css';\n\nclass Autocomplete extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            activeItem: null,\n            filteredSuggestions: [],\n            suggestions: [],\n            suggestionsEnabled: this.props.suggestionsEnabled,\n        }\n    }\n\n    // Create suggestion list from response from Yelp API, before autocomplete component is rendered\n    componentDidMount() {\n        getSuggestions(this.props).then((suggestions) => {\n            this.setState({\n                suggestions: suggestions\n            });\n        });\n    }\n\n    // Filter suggestions if user input changed and prop is sent to the Autocomplete component\n    componentWillReceiveProps(props) {\n        let filteredSuggestions;\n\n        // If autocompletion is disabled or user already typed the whole word from autocompletion list\n        // or if the user input is blank\n        if(!props.suggestionsEnabled || this.state.filteredSuggestions.includes(props.userInput) || !props.userInput) {\n            this.setState({\n                suggestionsEnabled: false\n            });\n            return null;\n        }\n\n        // If all abovementioned conditions aren't met, and everything is good create array with suggestions based on user input\n        filteredSuggestions = this.state.suggestions.filter((suggestion) => {\n            return suggestion.toLowerCase().startsWith(props.userInput.toLowerCase());\n        });\n\n        this.setState({\n            filteredSuggestions: filteredSuggestions,\n            suggestionsEnabled: true\n        });\n    }\n\n    // Handle selection of one of the autocompletion options\n    handleClick = (event) => {\n        this.props.setTermValue(event.currentTarget.innerHTML);\n\n        // Close all autocomplete suggestions if user selected one\n        this.setState({\n            suggestionsEnabled: false\n        });\n    }\n\n    handleKeyPress = (event) => {\n        console.log(event.keyCode);\n    }\n\n    render() {\n        // Check if there is any autocompletion suggestions available\n        if (this.state.suggestionsEnabled) {\n            return (\n                <ul className='suggestions' onKeyDown={ this.handleKeyPress }>\n                    {this.state.filteredSuggestions.map(autocompleteItem => {\n                        return (<li\n                                    className='suggestionItem'\n                                    key={ autocompleteItem }\n                                    onClick={ this.handleClick }\n                                    value={ autocompleteItem }\n                                >\n                            { autocompleteItem }\n                        </li>);\n                    })}\n                </ul>\n            );\n        }\n        return null;\n    }\n}\n\nexport default Autocomplete;\n","import React, { Component } from 'react';\nimport Autocomplete from '../Autocomplete/Autocomplete';\nimport './SearchBar.css';\nimport { SORT_OPTIONS } from '../../utils/Constants';\n\n/**\n * Renders Search BarBusinessList\n */\nexport class SearchBar extends Component {\n\n    constructor(props) {\n        super(props);\n\n        // Initialize component's state\n        this.state = {\n            term : '',\n            location: '',\n            sortBy: SORT_OPTIONS[ 'Best Match' ],\n            termError: false,\n            locationError: false,\n            termAutocompletionEnabled: false\n        };\n    }\n\n//============================================================================\n// Event handlers\n    handleTermChange = (event) => {\n        this.setState({\n            term: event.target.value,\n            termError: event.target.value.length > 0 && false,\n            termAutocompletionEnabled: true\n        });\n        event.preventDefault();\n    }\n\n    handleLocationChange = (event) => {\n        this.setState({\n            location: event.target.value,\n            locationError: event.target.value.length > 0 && false\n        });\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        });\n\n        if (this.state.term !== '' && this.state.location !== '') {\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        }\n    }\n\n    /**\n     *\n     * @param event\n     */\n    handleSearch = (event) => {\n        if (event.type === 'click' || event.keyCode === 13) {\n\n            // Call clearErrorMessageAndSearchResults function located in App.js to clear possible error message and previous search results\n            this.props.clearErrorMessageAndSearchResults();\n\n            // Check if user entered search request and location\n            if (this.state.location === '' && this.state.term === '') {\n                this.setState({\n                    termError: true,\n                    locationError: true\n                });\n              }\n            else if (this.state.term === '') {\n                this.setState({\n                    termError: true,\n                    locationError: false\n                });\n            }\n            else if (this.state.location === '') {\n                this.setState({\n                    termError: false,\n                    locationError: true\n                });\n            }\n\n            else {// if user has entered search request and location send GET request to the YELP API\n                // if both field aren't empty clear error flags\n                this.setState({\n                    termError: false,\n                    locationError: false,\n                    loading: true\n                });\n\n                this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    /**\n     *\n     * @param value\n     */\n    setTermValue = (value) => {\n        this.setState({\n            term: value\n        });\n\n        //Set focus on location field when user chose one of the options from autocomplete list\n        this.refs.locationField.focus();\n    }\n\n    /**\n     * Method disables restaurants autocompletion if location input field gained focus\n     * @param event\n     */\n    focusOnLocationField = (event) => {\n        this.setState({\n            termAutocompletionEnabled: false\n        });\n\n        event.preventDefault();\n    }\n\n// Event handlers end\n// =======================================================================\n    // Will return li elements containing search options for users\n    renderSortByOptions() {\n        return Object.keys(SORT_OPTIONS).map( sortByOption => {\n            const sortByOptionValue = SORT_OPTIONS[ sortByOption ];\n\n            return (\n                <li\n                    className={ sortByOptionValue === this.state.sortBy ? 'active' : '' }\n                    key={ sortByOptionValue }\n                    onClick={ this.handleSortByChange.bind(this, sortByOptionValue) }\n                >\n                    {sortByOption}\n                </li>);\n        });\n    }\n\n    /**\n     *  Main Render method\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div className='SearchBar'>\n                <div className='SearchBar-sort-options'>\n                    <ul>\n                        { this.renderSortByOptions() }\n                    </ul>\n                </div>\n\n                <div className='SearchBar-fields'>\n                    <form method='#' onKeyDown={ this.handleSearch } autoComplete='on' >\n                        <div>\n                            <div className='inputFieldErrorMessage'>\n                                { this.state.termError ? 'The field cannot be empty' : '' }\n                            </div>\n                            <input\n                                onChange={ this.handleTermChange }\n                                placeholder='Search'\n                                value={ this.state.term }\n                                className={ this.state.termError ? 'inputFieldError' : '' }\n                                ref='restaurantField'\n                                id='restaurantField'\n                                autoComplete='off'\n                                autoFocus\n                            />\n                            <Autocomplete\n                                userInput={ this.state.term }\n                                setTermValue={ this.setTermValue }\n                                suggestionsEnabled={ this.state.termAutocompletionEnabled }\n                                location={ this.state.location }\n                            />\n                        </div>\n\n                        <div>\n                            <div className='inputFieldErrorMessage'>\n                                { this.state.locationError ? 'The field cannot be empty' : '' }\n                            </div>\n                            <input\n                                onChange={ this.handleLocationChange }\n                                onFocus={ this.focusOnLocationField }\n                                placeholder='Where?'\n                                className={ this.state.locationError ? 'inputFieldError' : '' }\n                                ref='locationField'\n                                id='locationField'\n                                // autoComplete='off'\n                            />\n                        </div>\n                    </form>\n                </div>\n\n                <div className='SearchBar-submit'>\n                    <button onClick={ this.handleSearch }>Search</button>\n                </div>\n            </div>\n        );\n    }\n}// End of class\n// End of file\n","import { apiKey } from './ApiKeys';\n\nexport const Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${ term }&location=${ location }&sort_by=${ sortBy }`,\n                    { headers: {\n                        'Authorization' : `Bearer ${ apiKey }`\n                    } }\n        ).then((response) => { \n            return response.json();\n        }).then((jsonResponse) => {\n                return jsonResponse.businesses.map((business) => {\n                    if (jsonResponse.businesses) {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zip_code,\n                            category: business.categories[ 0 ].title,\n                            rating: business.rating,\n                            reviewCount: business.review_count,\n                            url: business.url,\n                            phone: business.phone,\n                            priceRange: business.price\n                        };\n                    }\n                    else {\n                        throw Error('Nothing was returned');\n                    }\n\n                });\n            }).catch(() => {\n                return [];\n            });\n    }\n}","export const apiKey = 'AtXwTkXAS_KRjWQfaQqZby_CgxqfySQsmzZwqXZjglLvYi29i69_ToIcvXeGPYMG75gqVTQz9o-U-kxr8FKrt-vIdsCNpweeNnf3NVuYlInAm2MrHqeb5DhmamhGXHYx';\nexport const geoMapKey = 'UNalj6nYBvGMrJAObc2BxfFl7jmCVgc7';","import React from 'react';\nimport { FadeLoader } from 'react-spinners';\nimport './Spinner.css';\n\n/**\n * Renders Spinner\n */\nexport class Spinner extends React.Component {\n\n    render() {\n        return (\n            <div className='spinner-container'>\n                <FadeLoader\n                    css='margin-top: 10rem;'\n                    sizeUnit={ 'rem' }\n                    size={ 6 }\n                    color={ 'black' }\n                    loading={ this.props.loading }\n                />\n            </div>\n        );\n    }\n} // End of Class\n// End of file\n","import React from 'react';\nimport './ErrorMessage.css';\n\n/**\n * Renders error message\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ErrorMessage = React.memo(({ errorMessage }) => {\n    return <h3 className='error'>{ errorMessage }</h3>;\n});// End of functional component\n// End of file\n","import React, { useState } from 'react';\nimport './LoginMenu.css';\nimport { FacebookLoginButton, GoogleLoginButton, TwitterLoginButton } from 'react-social-login-buttons';\n\n// Buttons style properties\nconst style = {\n    height: '2.3rem',\n    margin: '.1rem .3rem'\n}\n\nexport const LoginMenu = React.memo(() => {\n    const [ isLoginMenuVisible, setLoginMenuVisibility ] = useState(false);\n\n    return (\n        <div\n            className='Login'\n            onMouseEnter={ () => setLoginMenuVisibility(true) }\n            onMouseLeave={ () => setLoginMenuVisibility(false) }\n        >\n            <button className={ isLoginMenuVisible ? 'Login-Button Login-Button-Active' : 'Login-Button' }>\n                Log In With\n            </button>\n\n            <div className={ isLoginMenuVisible ? 'Login-Menu' : 'Login-Menu hidden' }>\n                <FacebookLoginButton style={ style }>\n                    <span>Facebook</span>\n                </FacebookLoginButton>\n                <GoogleLoginButton style={ style }>\n                    <span>Google</span>\n                </GoogleLoginButton>\n                <TwitterLoginButton style={ style }>\n                    <span>Twitter</span>\n                </TwitterLoginButton>\n            </div>\n        </div>\n    );\n});\n","import React from 'react';\nimport './App.css';\nimport { BusinessList } from './components/BusinessList/BusinessList.js';\nimport { SearchBar } from './components/SearchBar/SearchBar.js';\nimport { Yelp } from './utils/Yelp';\nimport { Spinner } from './components/Spinner/Spinner';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\nimport { LoginMenu } from './components/LoginMenu/LoginMenu';\n\n/**\n * Main App Class\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize state\n    this.state = {\n      businesses: [],\n      loading: false,\n      errorMessage: ''\n    };\n  } // End of Constructor\n\n  /**\n   *\n   * @param term\n   * @param location\n   * @param sortBy\n   */\n  searchYelp = (term, location, sortBy) => {\n      // Set loading state to true, so a spinner will be active until request to Yelp API is fulfilled\n      this.setState({\n        businesses: [],\n        loading: true\n      });\n\n      // Send request to Yelp API\n      Yelp.search(term, location, sortBy).then((businesses) => {\n        if (businesses.length > 0) {\n          this.setState({\n            loading: false,\n            businesses: businesses,\n            errorMessage: ''\n          });\n        }\n        else {\n          this.setState({\n            loading: false,\n            businesses: [],\n            errorMessage: `Your search hasn't returned any results. Please check your input or Internet connection`\n          })\n        }\n      });\n  };// End of SearchYelp method\n\n  /** Clear error message and list of businesses\n   *\n   */\n  clearErrorMessageAndSearchResults = () => {\n    this.setState({\n      businesses: [],\n      errorMessage: ''\n    });\n  }; // End of clearErrorMessageAndSearchResults method\n\n  /**\n   * Main Render method\n   * @returns {*}\n   */\n  render() {\n    return (\n        <div className='App'>\n            {/*Navigation Menu*/}\n            <nav className='NavMenu'>\n                <div className='Logo'>\n                    <h1>Ravenous</h1>\n                </div>\n                <div className='LoginMenu'>\n                    <LoginMenu />\n                </div>\n            </nav>\n            {/*Search Bar*/}\n            <SearchBar\n                searchYelp = { this.searchYelp }\n                clearErrorMessageAndSearchResults = { this.clearErrorMessageAndSearchResults }\n            />\n            <Spinner loading={ this.state.loading } />\n            {/*Search Results*/}\n            <BusinessList businesses = { this.state.businesses } />\n            <ErrorMessage errorMessage = { this.state.errorMessage } />\n        </div>\n    );\n  } // End of Main Render method\n} // End of App class\n\nexport default App;\n// End of file\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}