{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","utils/GetAutocompleteSuggestions.js","components/SearchBar/Autocomplete.js","components/SearchBar/SearchBar.js","utils/Yelp.js","utils/ApiKeys.js","components/Spinner/Spinner.js","components/ErrorMessage/ErrorMessage.js","components/LoginMenu/LoginMenu.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faMapMarkerAlt","faPhone","Business","business","this","props","className","src","imageSrc","alt","name","href","address","city","target","rel","icon","state","zipCode","phone","category","priceRange","rating","reviewCount","url","React","Component","BusinessList","memo","businesses","map","key","id","defaultAutocomplete","getSuggestions","location","a","Autocomplete","suggestionsEnabled","suggestions","filteredSuggestions","handleClick","bind","then","setState","includes","userInput","filter","suggestion","toLowerCase","startsWith","event","setTermValue","currentTarget","innerHTML","element","onClick","value","sortByOptions","SearchBar","term","sortBy","termError","locationError","termAutocompletionEnabled","handleTermChange","handleLocationChange","handleSearch","focusOnLocationField","sortByOption","length","preventDefault","searchYelp","type","keyCode","clearErrorMessageAndSearchResults","loading","refs","locationField","focus","Object","keys","sortByOptionValue","getSortByClass","handleSortByChange","renderSortByOptions","method","onKeyDown","autoComplete","undefined","onChange","placeholder","ref","autoFocus","onFocus","Yelp","search","fetch","headers","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","price","Error","catch","Spinner","css","sizeUnit","size","color","ErrorMessage","errorMessage","style","height","margin","LoginMenu","showMenu","toggleButton","onMouseEnter","onMouseLeave","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ec037bf9.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faPhone } from '@fortawesome/free-solid-svg-icons';\n// import { faFacebook } from '@fortawesome/free-solid-svg-icons';\n// import { faPinterestF } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faMapMarkerAlt, faPhone);\n\n/**\n *  Renders individual business card\n */\nexport class Business extends React.Component {\n\n    /**\n     *  Main Render function\n     * @returns {*}\n     */\n    render() {\n        const business = this.props.business;\n\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img\n                        src={business.imageSrc}\n                        alt=\"\"\n                    />\n\n                    <h2>{business.name}</h2>\n                    <div className=\"Business-information\">\n                        <div className=\"Business-address\">\n                            <p>\n                                <a href={\"https://www.google.com/maps/place/\" + business.address + \" \" + business.city} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    {business.address}  <FontAwesomeIcon icon=\"map-marker-alt\" />\n                                </a>\n\n                            </p>\n                            <p>{business.city}</p>\n                            <p>{business.state} {business.zipCode}</p>\n                            <p>\n                                {business.phone}\n                                <FontAwesomeIcon icon=\"phone\" />\n                            </p>\n                        </div>\n\n                        <div className=\"Business-reviews\">\n                            <h3>{business.category}</h3>\n                            <h3>{business.priceRange}</h3>\n                            <h3 className=\"rating\">{business.rating} star{business.rating > 0 && business.rating <= 1 ? \"\" : \"s\"}</h3>\n                            <p>{business.reviewCount} review{business.reviewCount === 1 ? \"\" : \"s\"}</p>\n                        </div>\n                    </div>\n                    <a href={business.url} target=\"_blank\" rel=\"noopener noreferrer\">Open business's page</a>\n                </div>\n            </div>\n        );\n    }\n}// End of Business Class\n// End of file\n","import React from 'react';\nimport './BusinessList.css';\nimport { Business } from '../Business/Business';\n\n/**\n * Renders list of business tiles filled with information received from Yelp API\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const BusinessList = React.memo(function BusinessList (props) {\n    return (\n        <div className=\"BusinessList\">\n            {/*Iterate through all business objects received from Yelp, and create an individual tile for each of them*/}\n            {props.businesses.map(business => {\n                return <Business key={business.id} business={business} />;\n            })}\n        </div>\n    );\n});// End of Functional Component\n// End of file\n","// import { apiKey } from './ApiKeys';\n// import { geoMapKey } from './ApiKeys';\n\nconst defaultAutocomplete = ['mcdonald\"s', 'kfc', 'sushi', 'subway', \n                            'pizza', 'steakhouse', 'korean', 'german', \n                            'french', 'ethiopian', 'arab', 'uzbek', \n                            'greek', 'italian', 'thai', 'vietnamese', \n                            'indian', 'chinese', 'russian', 'mexican', \n                            'american', 'cuban', 'ukranian', 'canadian',\n                            'japanese', 'steak', 'downtown',\n                            'mediterranean', 'fast food', 'bbq', 'brazilian',\n                            'vegetarian', 'punjabi'];\n\nconst getSuggestions = async (location) => {\n    // !!! Fix later ///\n    // try {\n    //     // const coordinates = await getLatitudeAndLongitude(location);\n\n    //     const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/autocomplete?latitude=${coordinates.lat}&longitude=${coordinates.lng}&text=\"restaurants\"`,\n    //     {headers: {\n    //         'Authorization' : `Bearer ${apiKey}`\n    //     }});\n\n    //     if (response.ok) {\n    //         const jsonResponse = await response.json();\n\n\n    //         return defaultAutocomplete.concat(\n    //             jsonResponse.categories.map(catObject => catObject.alias),\n    //             jsonResponse.terms.map(termsObj => termsObj.text));\n    //     }  \n    // }\n    // catch(error) { // If there's a network error (i.e. no internet connection, or api is unavailable return default autocomplete list)\n    //     console.log(error);\n\n    //     return defaultAutocomplete;\n    // }\n\n    return defaultAutocomplete;\n}\n\n// const getLatitudeAndLongitude = async (location) => {\n//     try {\n//         const response = await fetch(`http://www.mapquestapi.com/geocoding/v1/address?key=${geoMapKey}&location=17 Ave SW Calgary\"`);\n\n//         if (response.ok) {\n//             const jsonResponse = await response.json();\n\n//             return jsonResponse.results[0].locations[0].latLng;\n//         }\n//     }\n//     catch(error) { \n//         console.log(error);\n//     }\n// };\n\nexport default getSuggestions;","import React from 'react';\nimport getSuggestions from '../../utils/GetAutocompleteSuggestions';\nimport './Autocomplete.css';\n\nclass Autocomplete extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            suggestionsEnabled: this.props.suggestionsEnabled,\n            suggestions: [],\n            filteredSuggestions: []\n        }\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    // Create suggestion list from response from Yelp API, before autocomplete component is rendered\n    componentWillMount() {\n\n        getSuggestions(this.props).then((suggestions) => {\n            this.setState({\n                suggestions: suggestions\n            });\n\n        });\n    }\n\n    // Filter suggestions if user input changed and prop is sent to the Autocomplete component\n    componentWillReceiveProps(props) {\n        let filteredSuggestions;\n\n        // If autocompletion disabled or user already typed the whole word from autosuggestion list or the user input is blank\n        if(props.suggestionsEnabled === false || this.state.filteredSuggestions.includes(props.userInput) || props.userInput === \"\") {\n            this.setState({\n                suggestionsEnabled: false\n            });\n            return null;\n        }\n\n        // If all abovementioned conditions aren't met, and everything is good create array with suggestions based on user input\n        filteredSuggestions = this.state.suggestions.filter((suggestion) => {\n            return suggestion.toLowerCase().startsWith(props.userInput.toLowerCase());\n        });\n\n        this.setState({\n            filteredSuggestions: filteredSuggestions,\n            suggestionsEnabled: true\n        });\n    }\n\n    // Handle click\n    handleClick(event) {\n        this.props.setTermValue(event.currentTarget.innerHTML);\n\n        //Close all suggestions if user selected one\n        this.setState({\n            suggestionsEnabled: false\n        });\n    }\n\n    render() {\n        let output;\n\n        // Check if there is any suggestions available\n        if (this.state.suggestionsEnabled) {\n            output = (\n                <ul className=\"suggestions\">\n                    {this.state.filteredSuggestions.map(element => {\n                        return <li className=\"suggestionItem\"\n                                    key={element}\n                                    onClick={this.handleClick}\n                                    value={element}>\n                                        {element}\n                                </li>\n                    })}\n                </ul>\n            );\n        }\n        else { //If there's no any suggestions, we will return nothing, i.e. null\n            output = null;\n        }\n\n        return output;\n    }\n}\n\nexport default Autocomplete;\n","import React from 'react';\nimport Autocomplete from './Autocomplete';\nimport './SearchBar.css';\n\n// One of the object keys will be used to pass corresponding value to Yelp API to return results in accordance with user's choice\nconst sortByOptions = {\n    'Best Match' : \"best_match\",\n    'Highest Rated' : \"rating\",\n    'Most Reviewed' : \"review_count\"\n};\n\n/**\n * Renders Search BarBusinessList\n */\nexport class SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Initialize component's state\n        this.state = {\n            term : '',\n            location: '',\n            sortBy: 'best_match',\n            termError: false,\n            locationError: false,\n            termAutocompletionEnabled: false\n        };\n\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.setTermValue = this.setTermValue.bind(this);\n        this.focusOnLocationField = this.focusOnLocationField.bind(this);\n    }\n\n    // Function checking if the current search option is selected and returning css class name active if it's the case\n    getSortByClass (sortByOption) {\n        if (sortByOption === this.state.sortBy) {\n            return 'active';\n        }\n        else {\n            return '';\n        }\n    }\n\n//============================================================================\n// Event handlers\n\n    handleTermChange(event) {\n\n        this.setState({\n            term: event.target.value,\n            termError: event.target.value.length > 0 && false,\n            termAutocompletionEnabled: true\n        });\n        event.preventDefault();\n    }\n\n    handleLocationChange(event) {\n\n        this.setState({\n            location: event.target.value,\n            locationError: event.target.value.length > 0 && false\n        });\n    }\n\n    handleSortByChange(sortByOption) {\n\n        this.setState({\n            sortBy: sortByOption\n        });\n\n        if (this.state.term !== \"\" && this.state.location !== \"\") {\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        }\n    }\n\n    handleSearch(event) {\n\n        if (event.type === \"click\" || event.keyCode === 13) {\n\n            // Call clearErrorMessageAndSearchResults function located in App.js to clear possible error message and previous search results\n            this.props.clearErrorMessageAndSearchResults();\n\n            // Check if user entered search request and location\n            if (this.state.location === \"\" && this.state.term === \"\") {\n                this.setState({\n                    termError: true,\n                    locationError: true\n                });\n              }\n            else if (this.state.term === \"\") {\n                this.setState({\n                    termError: true,\n                    locationError: false\n                });\n            }\n            else if (this.state.location === \"\") {\n                this.setState({\n                    termError: false,\n                    locationError: true\n                });\n            }\n\n            else {// if user has entered search request and location send GET request to the YELP API\n                // if both field aren't empty clear error flags\n                this.setState({\n                    termError: false,\n                    locationError: false,\n                    loading: true\n                });\n\n                this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    setTermValue(value) {\n        this.setState({\n            term: value\n        });\n\n        //Set focus on location field when user chose one of the options from autocomplete list\n        this.refs.locationField.focus();\n    }\n\n    // Method will disable restaurants autocompletion if location input field gained focus\n\n    focusOnLocationField(event) {\n        this.setState({\n            termAutocompletionEnabled: false\n        });\n\n        event.preventDefault();\n    }\n\n// Event handlers end\n// =======================================================================\n\n    // Will return li elements containing search options for users\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map( sortByOption => {\n            let sortByOptionValue = sortByOptions[sortByOption];\n\n            return <li className={this.getSortByClass(sortByOptionValue)}\n                        key={sortByOptionValue}\n                        onClick={this.handleSortByChange.bind(this, sortByOptionValue)} >\n                            {sortByOption}\n                    </li>\n        });\n    }\n\n    /**\n     *  Main Render method\n     * @returns {*}\n     */\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n\n                <div className=\"SearchBar-fields\">\n                    <form method=\"#\" onKeyDown={this.handleSearch} autoComplete=\"on\" >\n                        <div>\n                            <div className=\"inputFieldErrorMessage\">{this.state.termError ? \"The field cannot be empty\" : undefined}</div>\n                            <input onChange={this.handleTermChange}\n                                    placeholder=\"Search Restaurants\"\n                                    value={this.state.term}\n                                    className={this.state.termError ? \"inputFieldError\" : undefined}\n                                    ref='restaurantField'\n                                    id='restaurantField'\n                                    autoComplete='off'\n                                    autoFocus\n                            />\n                            <Autocomplete\n                                    userInput={this.state.term}\n                                    setTermValue={this.setTermValue}\n                                    suggestionsEnabled={this.state.termAutocompletionEnabled}\n                                    location={this.state.location}\n                            />\n                        </div>\n\n                        <div>\n                            <div className=\"inputFieldErrorMessage\">{this.state.locationError ? \"The field cannot be empty\" : undefined}</div>\n                            <input onChange={this.handleLocationChange}\n                                    onFocus={this.focusOnLocationField}\n                                    placeholder=\"Where?\"\n                                    className={this.state.locationError ? \"inputFieldError\" : undefined}\n                                    ref='locationField'\n                                    id='locationField'\n                                    autoComplete='off'\n                            />\n                        </div>\n                    </form>\n                </div>\n\n                <div className=\"SearchBar-submit\">\n                    <button onClick={this.handleSearch}>Search</button>\n                </div>\n            </div>\n        );\n    }\n}// End of class\n// End of file\n","import { apiKey } from './ApiKeys';\n\nexport const Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n                    {headers: {\n                        'Authorization' : `Bearer ${apiKey}`\n                    }}\n        ).then((response) => { \n            return response.json();\n        }).then((jsonResponse) => {\n                return jsonResponse.businesses.map((business) => {\n                    if (jsonResponse.businesses) {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zip_code,\n                            category: business.categories[0].title,\n                            rating: business.rating,\n                            reviewCount: business.review_count,\n                            url: business.url,\n                            phone: business.phone,\n                            priceRange: business.price\n                        };\n                    }\n                    else {\n                        throw Error(\"Nothing was returned\");\n                    }\n\n                });\n            }).catch(() => {\n                return [];\n            });\n    }\n}","export const apiKey = 'AtXwTkXAS_KRjWQfaQqZby_CgxqfySQsmzZwqXZjglLvYi29i69_ToIcvXeGPYMG75gqVTQz9o-U-kxr8FKrt-vIdsCNpweeNnf3NVuYlInAm2MrHqeb5DhmamhGXHYx';\nexport const geoMapKey = 'UNalj6nYBvGMrJAObc2BxfFl7jmCVgc7';","import React from 'react';\nimport { FadeLoader } from 'react-spinners';\nimport './Spinner.css';\n\n/**\n * Renders Spinner\n */\nexport class Spinner extends React.Component {\n\n    render() {\n        return (\n            <div className=\"spinner-container\">\n                <FadeLoader\n                    css='margin-top: 10rem;'\n                    sizeUnit={\"rem\"}\n                    size={6}\n                    color={'black'}\n                    loading={this.props.loading}\n                />\n            </div>\n        );\n    }\n} // End of Class\n// End of file\n","import React from 'react';\nimport './ErrorMessage.css';\n\n/**\n * Renders error message\n * @param props\n * @returns {*}\n * @constructor\n */\nexport const ErrorMessage = React.memo(function ErrorMessage(props) {\n    return <h3 className=\"error\">{props.errorMessage}</h3>;\n});// End of functional component\n// End of file\n","import React from 'react';\nimport './LoginMenu.css';\nimport { FacebookLoginButton, GoogleLoginButton, TwitterLoginButton } from 'react-social-login-buttons';\n\n// Buttons style properties\nconst style = {\n    height: '2.3rem',\n    margin: '.1rem .3rem'\n}\n\nexport class LoginMenu extends React.Component{\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showMenu: false\n        }\n        this.toggleButton = this.toggleButton.bind(this);             \n    }\n\n    toggleButton() {\n        this.setState({\n            showMenu: !this.state.showMenu\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Login\"\n                onMouseEnter={this.toggleButton}  \n                onMouseLeave={this.toggleButton}>\n\n                <button className={this.state.showMenu ? 'Button-Active' : ''}>\n                    Log In With\n                </button>\n                \n                <div className={!this.state.showMenu ? 'Login-Menu hidden' : 'Login-Menu'}>\n                    <FacebookLoginButton style={style}>\n                        <span>Facebook</span> \n                    </FacebookLoginButton>\n                    <GoogleLoginButton style={style}>\n                        <span>Google</span> \n                    </GoogleLoginButton>\n                    <TwitterLoginButton style={style}>\n                        <span>Twitter</span> \n                    </TwitterLoginButton>\n                </div>    \n            </div>\n        )\n    }\n} ","import React from 'react';\nimport './App.css';\nimport { BusinessList } from './components/BusinessList/BusinessList.js';\nimport { SearchBar } from './components/SearchBar/SearchBar.js';\nimport { Yelp } from './utils/Yelp';\nimport { Spinner } from './components/Spinner/Spinner';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\nimport { LoginMenu } from './components/LoginMenu/LoginMenu';\n\n/**\n * Main App Class\n */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize state\n    this.state = {\n      businesses: [],\n      loading: false,\n      errorMessage: \"\"\n    };\n  } // End of Constructor\n\n  /**\n   *\n   * @param term\n   * @param location\n   * @param sortBy\n   */\n  searchYelp = (term, location, sortBy) => {\n      // Set loading state to true, so spinner will be active until request to Yelp API is fulfilled\n      this.setState({\n        businesses: [],\n        loading: true\n      });\n\n      // Send request to Yelp API\n      Yelp.search(term, location, sortBy).then((businesses) => {\n        if (businesses.length > 0) {\n          this.setState({\n            loading: false,\n            businesses: businesses,\n            errorMessage: \"\"\n          });\n        }\n        else {\n          this.setState({\n            loading: false,\n            businesses: [],\n            errorMessage: \"Your search hasn't returned any results. Please check your input or Internet connection\"\n          })\n        }\n      });\n  };// End of SearchYelp method\n\n  /** Clear error message and list of businesses\n   *\n   */\n  clearErrorMessageAndSearchResults = () => {\n    this.setState({\n      businesses: [],\n      errorMessage: \"\"\n    });\n  }; // End of clearErrorMessageAndSearchResults method\n\n  /**\n   * Main Render method\n   * @returns {*}\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        {/*Navigation Menu*/}\n        <nav className=\"NavMenu\">\n          <div className=\"Logo\">\n            <h1>Ravenous</h1>\n          </div>\n          <div className=\"LoginMenu\">\n            <LoginMenu />\n          </div>\n        </nav>\n        {/*Search Bar*/}\n        <SearchBar\n            searchYelp = {this.searchYelp}\n            clearErrorMessageAndSearchResults = {this.clearErrorMessageAndSearchResults}\n        />\n        <Spinner loading={this.state.loading} />\n        {/*Search Results*/}\n        <BusinessList businesses = {this.state.businesses} />\n        <ErrorMessage errorMessage = {this.state.errorMessage} />\n      </div>\n    );\n  } // End of Main Render method\n} // End of App class\n\nexport default App;\n// End of file\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { BrowserRouter as Router } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}